#!/usr/bin/env zsh
#
export SALTRICED="/usr/share/saltrice"
[ -f $SALTRICED/userconfig/_exports ] && source $SALTRICED/userconfig/_exports
[ -f $SALTRICED/userconfig/_aliasrc ] && source $SALTRICED/userconfig/_aliasrc

autoload -U colors && colors
export PS1="%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M %{$fg[magenta]%}%~%{$fg[red]%}]%{$reset_color%}$%b "

HISTSIZE=100000
SAVEHIST=100000
HISTFILE=~/.cache/zsh/history

# enable auto/tab complete
autoload -U compinit
zstyle ':completion:*' menu select
zmodload zsh/complist
compinit
_comp_options+=(globdots)
setopt COMPLETE_ALIASES
setopt SHWORDSPLIT
setopt NO_FLOW_CONTROL

bindkey -v
export KEYTIMEOUT=1

function zle-keymap-select {
  if [[ ${KEYMAP} == vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} == main ]] ||
       [[ ${KEYMAP} == viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}

zle -N zle-keymap-select
_fix_cursor() { echo -ne '\e[5 q'; }
precmd_functions+=(_fix_cursor)

lfcd(){
    tmp="$(mktemp)"
    lf -last-dir-path="$tmp" "$@"
    if [ -f "$tmp" ]; then
        dir="$(cat "$tmp")"
        rm -f "$tmp"
        [ -d "$dir" ] && [ "$dir" != "$(pwd)" ] && cd "$dir"
    fi
}
# fix backspace bug when switching between vim modes
bindkey '^?' backward-delete-char

bindkey -s '^o'       'lfcd\n'
bindkey -s '^f'       'cse\n'
bindkey -s '^[.'      'cd ..\n'
bindkey -s '^P'       'pdfd\n'
# this one looks scary, but it just binds CTRL-UP to
# format the previous command(s) in the format of
# printf "echo '%s' >> " $HISTORYCMD[n]
bindkey -s '^[[1;5A'  "^[[A' ^[Iecho '^[A>> "

autoload edit-command-line; zle -N edit-command-line
bindkey '^e' edit-command-line
bindkey '^[[1;5C' forward-word
bindkey '^[[1;5D' backward-word
bindkey '^r' history-incremental-search-backward

bindkey -M vicmd '^[[1;5C' vi-forward-word
bindkey -M vicmd '^[[1;5D' vi-backward-word
bindkey -v '^[[1;5C' vi-forward-word
bindkey -v '^[[1;5D' vi-backward-word


PLUGIND="/usr/share/zsh/plugins"

source $PLUGIND/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh 2>/dev/null
source $PLUGIND/zsh-autosuggestions/zsh-autosuggestions.zsh 2>/dev/null
# source $PLUGIND/zsh-expand-aliases/zsh-expand-aliases.zsh 2>/dev/null

# powerline-daemon -q
# source /usr/lib/python3.8/site-packages/powerline/bindings/zsh/powerline.zsh 2>/dev/null
# source $PLUGIND/zsh-gitfast/gitfast.plugin.zsh
# source $PLUGIND/zsh-agnoster-theme/agnoster.zsh-theme
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi
